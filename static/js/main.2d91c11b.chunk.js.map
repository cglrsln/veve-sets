{"version":3,"sources":["SortIcon.js","SetTable.js","App.js","reportWebVitals.js","index.js"],"names":["SortIcon","props","field","sortConfig","key","style","direction","xmlns","width","height","fill","class","viewBox","fill-rule","d","SetTable","useState","sets","setSets","setSortConfig","compareNumberFn","a","b","compareStringFn","localeCompare","compareDateFn","getTime","sortField","compareFn","sortedSet","sort","useEffect","console","log","axios","get","then","response","convertedSets","data","filter","item","collectibles","map","date","Date","collectiblesCount","length","total","catch","error","rows","index","formattedTotal","Intl","NumberFormat","currency","format","formattedDate","toLocaleString","year","month","day","timeZone","season","name","Table","striped","bordered","hover","onClick","e","App","Container","Navbar","className","Brand","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d91c11b.chunk.js","sourcesContent":["function SortIcon(props) {\n\n  function icon(direction) {\n    if (direction === 'ascending') {\n      return(\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-up-circle\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z\"/>\n        </svg>\n      )\n    } else {\n      return(\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-arrow-down-circle\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\"/>\n        </svg>\n      )\n    }\n  }\n\n  if (props.field === props.sortConfig.key) {\n    return(<span style={{ 'margin-left': 3 }}>{icon(props.sortConfig.direction)}</span>)\n  } else { return null }\n\n}\n\nexport default SortIcon\n","import axios from 'axios';\nimport { useState, useEffect} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport SortIcon from './SortIcon';\n\nfunction SetTable() {\n  const [sets, setSets] = useState([])\n  const [sortConfig, setSortConfig] = useState({\n    field: 'total',\n    direction: 'ascending'\n  })\n\n  useEffect(() => {\n    console.log(\"fetching data\")\n    let path = `https://cmar.github.io/veve-price-scraper/current.json`\n    axios.get(path)\n      .then(response => {\n        const filteredSets = response.data.filter(item => item.collectibles)\n        const convertedSets = filteredSets.map(item => {\n          item.date = new Date(item.date)\n          item.collectiblesCount = item.collectibles.length\n          return item\n        })\n        const sortedSet = convertedSets.sort((a, b) => a.total - b.total)\n        setSortConfig({ key: 'total', direction: 'ascending' });\n        setSets(convertedSets)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n\n  function compareNumberFn(key, direction) {\n    if (direction === 'ascending') {\n      return (a, b) => a[key] - b[key]\n    } else {\n      return (a, b) => b[key] - a[key]\n    }\n  }\n\n  function compareStringFn(key, direction) {\n    if (direction === 'ascending') {\n      return (a, b) => a[key].localeCompare(b[key])\n    } else {\n      return (a, b) => b[key].localeCompare(a[key])\n    }\n  }\n\n  function compareDateFn(key, direction) {\n    if (direction === 'ascending') {\n      return (a, b) => a[key].getTime() - b[key].getTime()\n    } else {\n      return (a, b) => b[key].getTime() - a[key].getTime()\n    }\n  }\n\n  function sortField(key, compareFn = compareNumberFn) {\n    let direction = 'ascending';\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n\n    let sortedSet = [...sets]\n    sortedSet.sort(compareFn(key, direction))\n\n    setSortConfig({ key, direction });\n    setSets(sortedSet)\n  }\n\n  const rows = sets.map((item, index) => {\n    const formattedTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' })\n                            .format(item.total);\n\n    const formattedDate = item.date.toLocaleString('en-US', {\n      year: 'numeric', month: 'short', day: 'numeric', timeZone: 'UTC' })\n\n    return(\n      <tr key={index}>\n        <td>{item.season}</td>\n        <td>{formattedDate}</td>\n        <td>{item.name}</td>\n        <td>{item.collectiblesCount}</td>\n        <td>{formattedTotal}</td>\n      </tr>\n    )\n  })\n\n  return(\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th onClick={(e) => sortField('season')}>Season<SortIcon sortConfig={sortConfig} field='season'/></th>\n          <th onClick={(e) => sortField('date', compareDateFn)}>Drop Date<SortIcon sortConfig={sortConfig} field='date'/></th>\n          <th onClick={(e) => sortField('name', compareStringFn)}>Set<SortIcon sortConfig={sortConfig} field='name'/></th>\n          <th onClick={(e) => sortField('collectiblesCount')}># of Collectibles<SortIcon sortConfig={sortConfig} field='collectiblesCount' /></th>\n          <th onClick={(e) => sortField('total')}>Price<SortIcon sortConfig={sortConfig} field='total'/></th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default SetTable\n","import './App.css';\nimport SetTable from './SetTable';\n\nimport { useState, useEffect} from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Navbar className=\"navbar-dark bg-primary mb-3\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <h3>VeVe Setlist</h3>\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n      <SetTable/>\n      <p>Data provided by <a href=\"https://ecomiwiki.com/marketplace/floors\">ECOMI WIKI</a></p>\n    </Container>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}