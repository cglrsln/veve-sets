{"version":3,"sources":["SetTable.js","App.js","reportWebVitals.js","index.js"],"names":["SetTable","useState","sets","setSets","sortOrder","setSortOrder","useEffect","console","log","axios","get","then","response","convertedSets","data","filter","item","collectibles","map","date","Date","collectiblesCount","length","sort","a","b","total","catch","error","rows","index","formattedTotal","Intl","NumberFormat","style","currency","format","formattedDate","toLocaleString","year","month","day","timeZone","season","name","Table","striped","bordered","hover","onClick","order","sortedSet","getTime","localeCompare","App","Container","Navbar","className","Brand","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd0d02eb.chunk.js","sourcesContent":["import axios from 'axios';\nimport { useState, useEffect} from 'react';\nimport Table from 'react-bootstrap/Table';\n\nfunction SetTable() {\n  const [sets, setSets] = useState([])\n  const [sortOrder, setSortOrder] = useState('')\n\n  useEffect(() => {\n    console.log(\"fetching data\")\n    let path = `https://cmar.github.io/veve-price-scraper/current.json`\n    axios.get(path)\n      .then(response => {\n        const filteredSets = response.data.filter(item => item.collectibles)\n        const convertedSets = filteredSets.map(item => {\n          item.date = new Date(item.date)\n          item.collectiblesCount = item.collectibles.length\n          return item\n        })\n        const sortedSet = convertedSets.sort((a, b) => a.total - b.total)\n        setSets(convertedSets)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n  // sets.sort((a, b) => {\n  //   if (a.season < b.season) { return -1 }\n  //   if (a.season > b.season) { return 1 }\n  //   if (a.name < b.name) { return -1 }\n  //   if (a.name > b.name) { return 1 }\n  //   return b.total - a.total\n  // })\n\n  const rows = sets.map((item, index) => {\n    const formattedTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' })\n                            .format(item.total);\n\n    const formattedDate = item.date.toLocaleString('en-US', {\n      year: 'numeric', month: 'short', day: 'numeric', timeZone: 'UTC' })\n\n    return(\n      <tr key={index}>\n        <td>{item.season}</td>\n        <td>{formattedDate}</td>\n        <td>{item.name}</td>\n        <td>{item.collectiblesCount}</td>\n        <td>{formattedTotal}</td>\n      </tr>\n    )\n  })\n\n  function sortDropDate() {\n    let order = (sortOrder === 'drop_date_asc') ? 'drop_date_desc' : 'drop_date_asc'\n    let sortedSet = [...sets]\n\n    if (order === 'drop_date_asc') {\n      sortedSet = sortedSet.sort((a, b) => a.date.getTime() - b.date.getTime())\n    }\n    else if (order === 'drop_date_desc') {\n      sortedSet = sortedSet.sort((a, b) => b.date.getTime() - a.date.getTime())\n    }\n\n    setSortOrder(order)\n    setSets(sortedSet)\n  }\n\n  function sortName() {\n    let order = (sortOrder === 'name_asc') ? 'name_desc' : 'name_asc'\n    let sortedSet = [...sets]\n\n    if (order === 'name_asc') {\n      sortedSet = sortedSet.sort((a, b) => a.name.localeCompare(b.name))\n    }\n    else if (order === 'name_desc') {\n      sortedSet = sortedSet.sort((a, b) => b.name.localeCompare(a.name))\n    }\n\n    setSortOrder(order)\n    setSets(sortedSet)\n  }\n\n  function sortCollectibles() {\n    let order = (sortOrder === 'collectibles_asc') ? 'collectibles_desc' : 'collectibles_asc'\n    let sortedSet = [...sets]\n\n    if (order === 'collectibles_asc') {\n      sortedSet = sortedSet.sort((a, b) => a.collectiblesCount - b.collectiblesCount)\n    }\n    else if (order === 'collectibles_desc') {\n      sortedSet = sortedSet.sort( (a, b) => b.collectiblesCount - a.collectiblesCount)\n    }\n\n    setSortOrder(order)\n    setSets(sortedSet)\n  }\n\n  function sortPrice() {\n    let order = (sortOrder === 'price_asc') ? 'price_desc' : 'price_asc'\n    let sortedSet = [...sets]\n\n    if (order === 'price_asc') {\n      sortedSet = sortedSet.sort((a, b) => a.total - b.total)\n    }\n    else if (order === 'price_desc') {\n      sortedSet = sortedSet.sort( (a, b) => b.total - a.total)\n    }\n\n    setSortOrder(order)\n    setSets(sortedSet)\n  }\n\n  function sortSeason() {\n    let order = (sortOrder === 'season_asc') ? 'season_desc' : 'season_asc'\n    let sortedSet = [...sets]\n\n    if (order === 'season_asc') {\n      sortedSet = sortedSet.sort((a, b) => a.season - b.season)\n    }\n    else if (order === 'season_desc') {\n      sortedSet = sortedSet.sort( (a, b) => b.season - a.season)\n    }\n\n    setSortOrder(order)\n    setSets(sortedSet)\n  }\n\n  return(\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th onClick={sortSeason}>Season</th>\n          <th onClick={sortDropDate}>Drop Date</th>\n          <th onClick={sortName}>Set</th>\n          <th onClick={sortCollectibles}># of Collectibles</th>\n          <th onClick={sortPrice}>Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default SetTable\n","import './App.css';\nimport SetTable from './SetTable';\n\nimport { useState, useEffect} from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Navbar className=\"navbar-dark bg-primary mb-3\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <h3>VeVe Setlist</h3>\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n      <SetTable/>\n      <p>Data provided by <a href=\"https://ecomiwiki.com/marketplace/floors\">ECOMI WIKI</a></p>\n    </Container>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}